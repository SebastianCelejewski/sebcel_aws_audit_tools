AWSTemplateFormatVersion: '2010-09-09'
Description: CIS AWS Foundation Controls stack (CIS v. 1.2)
Parameters:
  LogGroupName:
    Type: String
    Default: CloudTrail/DefaultLogGroup
    Description: Enter CloudWatch Logs log group name. Default is CloudTrail/DefaultLogGroup
  Email:
    Type: String
    Description: Email address to notify when an API activity has triggered an alarm
Resources:
  AuthorizationFailuresMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: AuthorizationFailureCount
          MetricValue: '1'
  AuthorizationFailuresAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made (CIS 3.1)
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ManagementConsoleLoginWithoutMfaMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventName=\"ConsoleLogin\") && ($.additionalEventData.MFAUsed !=\"Yes\")}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: ManagementConsoleLoginWithoutMfaEventCount
          MetricValue: '1'
  ManagementConsoleLoginWithoutMfaAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailManagementConsoleLoginWithoutMfa
      AlarmDescription: Alarms when user logs into Management Console without MFA (CIS 3.2).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: ManagementConsoleLoginWithoutMfaEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  UseOfRootAccountMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{$.userIdentity.type=\"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !=\"AwsServiceEvent\"}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: UseOfRootAccountEventCount
          MetricValue: '1'
  UseOfRootAccountAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailUseOfRootAccount
      AlarmDescription: Alarms when root account is used (CIS 3.3)
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: UseOfRootAccountEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  IAMPolicyChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: IAMPolicyEventCount
          MetricValue: '1'
  IAMPolicyChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailIAMPolicyChanges
      AlarmDescription: Alarms when an API call is made to change an IAM policy (CIS 3.4).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: IAMPolicyEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  CloudTrailChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: CloudTrailEventCount
          MetricValue: '1'
  CloudTrailChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail (CIS 3.5).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: CloudTrailEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ConsoleSignInFailuresMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: ConsoleSignInFailureCount
          MetricValue: '1'
  ConsoleSignInFailuresAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailConsoleSignInFailures
      AlarmDescription: Alarms when an unauthenticated API call is made to sign into the console (CIS 3.6).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '3'
  DisablingOrScheduledDeletionOfCustomerCreatedCmkKeyMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: DisablingOrScheduledDeletionOfCustomerCreatedCmkKeyEventCount
          MetricValue: '1'
  DisablingOrScheduledDeletionOfCustomerCreatedCmkKeyAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailDisablingOrScheduledDeletionOfCustomerCreatedCmkKey
      AlarmDescription: Alarms when customer created CMK key is disabled or scheduled to be deleted (CIS 3.7).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: DisablingOrScheduledDeletionOfCustomerCreatedCmkKeyEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  S3BucketPolicyChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: S3BucketPolicyChangesEventCount
          MetricValue: '1'
  S3BucketPolicyChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailS3BucketPolicyChanges
      AlarmDescription: Alarms when S3 bucket policy is changed (CIS 3.8).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: S3BucketPolicyChangesEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ConfigConfigurationChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: ConfigConfigurationChangesEventCount
          MetricValue: '1'
  ConfigConfigurationChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailConfigConfigurationChanges
      AlarmDescription: Alarms when Config configuration changes (CIS 3.9).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: ConfigConfigurationChangesEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  SecurityGroupChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: SecurityGroupEventCount
          MetricValue: '1'
  SecurityGroupChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailSecurityGroupChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Security Group (3.10).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: SecurityGroupEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  NetworkAclChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern:  "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: NetworkAclEventCount
          MetricValue: '1'
  NetworkAclChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailNetworkAclChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Network ACL (CIS 3.11).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: NetworkAclEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  GatewayChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: GatewayEventCount
          MetricValue: '1'
  GatewayChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailGatewayChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Customer or Internet Gateway (CIS 3.12).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: GatewayEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  RouteTableChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{($.eventName=\"ConsoleLogin\") && ($.additionalEventData.MFAUsed !=\"Yes\")}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: RouteTableChangesEventCount
          MetricValue: '1'
  RouteTableChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailRouteTableChanges
      AlarmDescription: Alarms when route tables change (CIS 3.13).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: RouteTableChangesEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  VpcChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: VpcEventCount
          MetricValue: '1'
  VpcChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailVpcChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic (CIS 3.14).
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: VpcEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  EC2InstanceChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: EC2InstanceEventCount
          MetricValue: '1'
  EC2InstanceChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailEC2InstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start, stop or reboot an EC2 instance.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: EC2InstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  EC2LargeInstanceChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: LogGroupName
      FilterPattern: "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: EC2LargeInstanceEventCount
          MetricValue: '1'
  EC2LargeInstanceChangesAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: CloudTrailEC2LargeInstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: EC2LargeInstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  AlarmNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint:
            Ref: Email
          Protocol: email